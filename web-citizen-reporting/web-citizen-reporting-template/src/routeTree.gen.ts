/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ThankYouImport } from './routes/thank-you'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as NotificationsIndexImport } from './routes/notifications/index'
import { Route as GuidesIndexImport } from './routes/guides/index'
import { Route as FormsIndexImport } from './routes/forms/index'
import { Route as NotificationsIdImport } from './routes/notifications/$id'
import { Route as GuidesIdImport } from './routes/guides/$id'
import { Route as FormsIdImport } from './routes/forms/$id'

// Create/Update Routes

const ThankYouRoute = ThankYouImport.update({
  id: '/thank-you',
  path: '/thank-you',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NotificationsIndexRoute = NotificationsIndexImport.update({
  id: '/notifications/',
  path: '/notifications/',
  getParentRoute: () => rootRoute,
} as any)

const GuidesIndexRoute = GuidesIndexImport.update({
  id: '/guides/',
  path: '/guides/',
  getParentRoute: () => rootRoute,
} as any)

const FormsIndexRoute = FormsIndexImport.update({
  id: '/forms/',
  path: '/forms/',
  getParentRoute: () => rootRoute,
} as any)

const NotificationsIdRoute = NotificationsIdImport.update({
  id: '/notifications/$id',
  path: '/notifications/$id',
  getParentRoute: () => rootRoute,
} as any)

const GuidesIdRoute = GuidesIdImport.update({
  id: '/guides/$id',
  path: '/guides/$id',
  getParentRoute: () => rootRoute,
} as any)

const FormsIdRoute = FormsIdImport.update({
  id: '/forms/$id',
  path: '/forms/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/thank-you': {
      id: '/thank-you'
      path: '/thank-you'
      fullPath: '/thank-you'
      preLoaderRoute: typeof ThankYouImport
      parentRoute: typeof rootRoute
    }
    '/forms/$id': {
      id: '/forms/$id'
      path: '/forms/$id'
      fullPath: '/forms/$id'
      preLoaderRoute: typeof FormsIdImport
      parentRoute: typeof rootRoute
    }
    '/guides/$id': {
      id: '/guides/$id'
      path: '/guides/$id'
      fullPath: '/guides/$id'
      preLoaderRoute: typeof GuidesIdImport
      parentRoute: typeof rootRoute
    }
    '/notifications/$id': {
      id: '/notifications/$id'
      path: '/notifications/$id'
      fullPath: '/notifications/$id'
      preLoaderRoute: typeof NotificationsIdImport
      parentRoute: typeof rootRoute
    }
    '/forms/': {
      id: '/forms/'
      path: '/forms'
      fullPath: '/forms'
      preLoaderRoute: typeof FormsIndexImport
      parentRoute: typeof rootRoute
    }
    '/guides/': {
      id: '/guides/'
      path: '/guides'
      fullPath: '/guides'
      preLoaderRoute: typeof GuidesIndexImport
      parentRoute: typeof rootRoute
    }
    '/notifications/': {
      id: '/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/thank-you': typeof ThankYouRoute
  '/forms/$id': typeof FormsIdRoute
  '/guides/$id': typeof GuidesIdRoute
  '/notifications/$id': typeof NotificationsIdRoute
  '/forms': typeof FormsIndexRoute
  '/guides': typeof GuidesIndexRoute
  '/notifications': typeof NotificationsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/thank-you': typeof ThankYouRoute
  '/forms/$id': typeof FormsIdRoute
  '/guides/$id': typeof GuidesIdRoute
  '/notifications/$id': typeof NotificationsIdRoute
  '/forms': typeof FormsIndexRoute
  '/guides': typeof GuidesIndexRoute
  '/notifications': typeof NotificationsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/thank-you': typeof ThankYouRoute
  '/forms/$id': typeof FormsIdRoute
  '/guides/$id': typeof GuidesIdRoute
  '/notifications/$id': typeof NotificationsIdRoute
  '/forms/': typeof FormsIndexRoute
  '/guides/': typeof GuidesIndexRoute
  '/notifications/': typeof NotificationsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/thank-you'
    | '/forms/$id'
    | '/guides/$id'
    | '/notifications/$id'
    | '/forms'
    | '/guides'
    | '/notifications'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/thank-you'
    | '/forms/$id'
    | '/guides/$id'
    | '/notifications/$id'
    | '/forms'
    | '/guides'
    | '/notifications'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/thank-you'
    | '/forms/$id'
    | '/guides/$id'
    | '/notifications/$id'
    | '/forms/'
    | '/guides/'
    | '/notifications/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ThankYouRoute: typeof ThankYouRoute
  FormsIdRoute: typeof FormsIdRoute
  GuidesIdRoute: typeof GuidesIdRoute
  NotificationsIdRoute: typeof NotificationsIdRoute
  FormsIndexRoute: typeof FormsIndexRoute
  GuidesIndexRoute: typeof GuidesIndexRoute
  NotificationsIndexRoute: typeof NotificationsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ThankYouRoute: ThankYouRoute,
  FormsIdRoute: FormsIdRoute,
  GuidesIdRoute: GuidesIdRoute,
  NotificationsIdRoute: NotificationsIdRoute,
  FormsIndexRoute: FormsIndexRoute,
  GuidesIndexRoute: GuidesIndexRoute,
  NotificationsIndexRoute: NotificationsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/thank-you",
        "/forms/$id",
        "/guides/$id",
        "/notifications/$id",
        "/forms/",
        "/guides/",
        "/notifications/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/thank-you": {
      "filePath": "thank-you.tsx"
    },
    "/forms/$id": {
      "filePath": "forms/$id.tsx"
    },
    "/guides/$id": {
      "filePath": "guides/$id.tsx"
    },
    "/notifications/$id": {
      "filePath": "notifications/$id.tsx"
    },
    "/forms/": {
      "filePath": "forms/index.tsx"
    },
    "/guides/": {
      "filePath": "guides/index.tsx"
    },
    "/notifications/": {
      "filePath": "notifications/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
