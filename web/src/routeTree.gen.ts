/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ResponsesIndexImport } from './routes/responses/index'
import { Route as ResetPasswordIndexImport } from './routes/reset-password/index'
import { Route as ObserversIndexImport } from './routes/observers/index'
import { Route as NgosIndexImport } from './routes/ngos/index'
import { Route as MonitoringObserversIndexImport } from './routes/monitoring-observers/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as ForgotPasswordIndexImport } from './routes/forgot-password/index'
import { Route as ElectionRoundsIndexImport } from './routes/election-rounds/index'
import { Route as ElectionEventIndexImport } from './routes/election-event/index'
import { Route as AcceptInviteIndexImport } from './routes/accept-invite/index'
import { Route as ResponsesSubmissionIdImport } from './routes/responses/$submissionId'
import { Route as ResetPasswordSuccessImport } from './routes/reset-password/success'
import { Route as ObserversObserverIdImport } from './routes/observers/$observerId'
import { Route as NgosNgoIdImport } from './routes/ngos/$ngoId'
import { Route as MonitoringObserversCreateNewMessageImport } from './routes/monitoring-observers/create-new-message'
import { Route as MonitoringObserversTabImport } from './routes/monitoring-observers/$tab'
import { Route as FormsFormIdImport } from './routes/forms/$formId'
import { Route as ElectionRoundsElectionRoundIdImport } from './routes/election-rounds/$electionRoundId'
import { Route as ElectionEventTabImport } from './routes/election-event/$tab'
import { Route as AcceptInviteSuccessImport } from './routes/accept-invite/success'
import { Route as ResponsesQuickReportsQuickReportIdImport } from './routes/responses/quick-reports/$quickReportId'
import { Route as ResponsesCitizenReportsCitizenReportIdImport } from './routes/responses/citizen-reports/$citizenReportId'
import { Route as ResponsesFormIdAggregatedImport } from './routes/responses/$formId.aggregated'
import { Route as ObserversObserverIdEditImport } from './routes/observers_.$observerId.edit'
import { Route as MonitoringObserversPushMessagesIdImport } from './routes/monitoring-observers/push-messages.$id'
import { Route as MonitoringObserversEditMonitoringObserverIdImport } from './routes/monitoring-observers/edit.$monitoringObserverId'
import { Route as FormsFormIdEditImport } from './routes/forms_.$formId.edit'
import { Route as FormsFormIdLanguageCodeImport } from './routes/forms/$formId_.$languageCode'
import { Route as MonitoringObserversViewMonitoringObserverIdTabImport } from './routes/monitoring-observers/view/$monitoringObserverId.$tab'
import { Route as MonitoringObserversPushMessagesIdViewImport } from './routes/monitoring-observers/push-messages.$id_.view'
import { Route as FormsFormIdEditTranslationLanguageCodeImport } from './routes/forms_.$formId.edit-translation.$languageCode'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ResponsesIndexRoute = ResponsesIndexImport.update({
  path: '/responses/',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordIndexRoute = ResetPasswordIndexImport.update({
  path: '/reset-password/',
  getParentRoute: () => rootRoute,
} as any)

const ObserversIndexRoute = ObserversIndexImport.update({
  path: '/observers/',
  getParentRoute: () => rootRoute,
} as any)

const NgosIndexRoute = NgosIndexImport.update({
  path: '/ngos/',
  getParentRoute: () => rootRoute,
} as any)

const MonitoringObserversIndexRoute = MonitoringObserversIndexImport.update({
  path: '/monitoring-observers/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const ForgotPasswordIndexRoute = ForgotPasswordIndexImport.update({
  path: '/forgot-password/',
  getParentRoute: () => rootRoute,
} as any)

const ElectionRoundsIndexRoute = ElectionRoundsIndexImport.update({
  path: '/election-rounds/',
  getParentRoute: () => rootRoute,
} as any)

const ElectionEventIndexRoute = ElectionEventIndexImport.update({
  path: '/election-event/',
  getParentRoute: () => rootRoute,
} as any)

const AcceptInviteIndexRoute = AcceptInviteIndexImport.update({
  path: '/accept-invite/',
  getParentRoute: () => rootRoute,
} as any)

const ResponsesSubmissionIdRoute = ResponsesSubmissionIdImport.update({
  path: '/responses/$submissionId',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordSuccessRoute = ResetPasswordSuccessImport.update({
  path: '/reset-password/success',
  getParentRoute: () => rootRoute,
} as any)

const ObserversObserverIdRoute = ObserversObserverIdImport.update({
  path: '/observers/$observerId',
  getParentRoute: () => rootRoute,
} as any)

const NgosNgoIdRoute = NgosNgoIdImport.update({
  path: '/ngos/$ngoId',
  getParentRoute: () => rootRoute,
} as any)

const MonitoringObserversCreateNewMessageRoute =
  MonitoringObserversCreateNewMessageImport.update({
    path: '/monitoring-observers/create-new-message',
    getParentRoute: () => rootRoute,
  } as any)

const MonitoringObserversTabRoute = MonitoringObserversTabImport.update({
  path: '/monitoring-observers/$tab',
  getParentRoute: () => rootRoute,
} as any)

const FormsFormIdRoute = FormsFormIdImport.update({
  path: '/forms/$formId',
  getParentRoute: () => rootRoute,
} as any)

const ElectionRoundsElectionRoundIdRoute =
  ElectionRoundsElectionRoundIdImport.update({
    path: '/election-rounds/$electionRoundId',
    getParentRoute: () => rootRoute,
  } as any)

const ElectionEventTabRoute = ElectionEventTabImport.update({
  path: '/election-event/$tab',
  getParentRoute: () => rootRoute,
} as any)

const AcceptInviteSuccessRoute = AcceptInviteSuccessImport.update({
  path: '/accept-invite/success',
  getParentRoute: () => rootRoute,
} as any)

const ResponsesQuickReportsQuickReportIdRoute =
  ResponsesQuickReportsQuickReportIdImport.update({
    path: '/responses/quick-reports/$quickReportId',
    getParentRoute: () => rootRoute,
  } as any)

const ResponsesCitizenReportsCitizenReportIdRoute =
  ResponsesCitizenReportsCitizenReportIdImport.update({
    path: '/responses/citizen-reports/$citizenReportId',
    getParentRoute: () => rootRoute,
  } as any)

const ResponsesFormIdAggregatedRoute = ResponsesFormIdAggregatedImport.update({
  path: '/responses/$formId/aggregated',
  getParentRoute: () => rootRoute,
} as any)

const ObserversObserverIdEditRoute = ObserversObserverIdEditImport.update({
  path: '/observers/$observerId/edit',
  getParentRoute: () => rootRoute,
} as any)

const MonitoringObserversPushMessagesIdRoute =
  MonitoringObserversPushMessagesIdImport.update({
    path: '/monitoring-observers/push-messages/$id',
    getParentRoute: () => rootRoute,
  } as any)

const MonitoringObserversEditMonitoringObserverIdRoute =
  MonitoringObserversEditMonitoringObserverIdImport.update({
    path: '/monitoring-observers/edit/$monitoringObserverId',
    getParentRoute: () => rootRoute,
  } as any)

const FormsFormIdEditRoute = FormsFormIdEditImport.update({
  path: '/forms/$formId/edit',
  getParentRoute: () => rootRoute,
} as any)

const FormsFormIdLanguageCodeRoute = FormsFormIdLanguageCodeImport.update({
  path: '/forms/$formId/$languageCode',
  getParentRoute: () => rootRoute,
} as any)

const MonitoringObserversViewMonitoringObserverIdTabRoute =
  MonitoringObserversViewMonitoringObserverIdTabImport.update({
    path: '/monitoring-observers/view/$monitoringObserverId/$tab',
    getParentRoute: () => rootRoute,
  } as any)

const MonitoringObserversPushMessagesIdViewRoute =
  MonitoringObserversPushMessagesIdViewImport.update({
    path: '/monitoring-observers/push-messages/$id/view',
    getParentRoute: () => rootRoute,
  } as any)

const FormsFormIdEditTranslationLanguageCodeRoute =
  FormsFormIdEditTranslationLanguageCodeImport.update({
    path: '/forms/$formId/edit-translation/$languageCode',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/accept-invite/success': {
      preLoaderRoute: typeof AcceptInviteSuccessImport
      parentRoute: typeof rootRoute
    }
    '/election-event/$tab': {
      preLoaderRoute: typeof ElectionEventTabImport
      parentRoute: typeof rootRoute
    }
    '/election-rounds/$electionRoundId': {
      preLoaderRoute: typeof ElectionRoundsElectionRoundIdImport
      parentRoute: typeof rootRoute
    }
    '/forms/$formId': {
      preLoaderRoute: typeof FormsFormIdImport
      parentRoute: typeof rootRoute
    }
    '/monitoring-observers/$tab': {
      preLoaderRoute: typeof MonitoringObserversTabImport
      parentRoute: typeof rootRoute
    }
    '/monitoring-observers/create-new-message': {
      preLoaderRoute: typeof MonitoringObserversCreateNewMessageImport
      parentRoute: typeof rootRoute
    }
    '/ngos/$ngoId': {
      preLoaderRoute: typeof NgosNgoIdImport
      parentRoute: typeof rootRoute
    }
    '/observers/$observerId': {
      preLoaderRoute: typeof ObserversObserverIdImport
      parentRoute: typeof rootRoute
    }
    '/reset-password/success': {
      preLoaderRoute: typeof ResetPasswordSuccessImport
      parentRoute: typeof rootRoute
    }
    '/responses/$submissionId': {
      preLoaderRoute: typeof ResponsesSubmissionIdImport
      parentRoute: typeof rootRoute
    }
    '/accept-invite/': {
      preLoaderRoute: typeof AcceptInviteIndexImport
      parentRoute: typeof rootRoute
    }
    '/election-event/': {
      preLoaderRoute: typeof ElectionEventIndexImport
      parentRoute: typeof rootRoute
    }
    '/election-rounds/': {
      preLoaderRoute: typeof ElectionRoundsIndexImport
      parentRoute: typeof rootRoute
    }
    '/forgot-password/': {
      preLoaderRoute: typeof ForgotPasswordIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/monitoring-observers/': {
      preLoaderRoute: typeof MonitoringObserversIndexImport
      parentRoute: typeof rootRoute
    }
    '/ngos/': {
      preLoaderRoute: typeof NgosIndexImport
      parentRoute: typeof rootRoute
    }
    '/observers/': {
      preLoaderRoute: typeof ObserversIndexImport
      parentRoute: typeof rootRoute
    }
    '/reset-password/': {
      preLoaderRoute: typeof ResetPasswordIndexImport
      parentRoute: typeof rootRoute
    }
    '/responses/': {
      preLoaderRoute: typeof ResponsesIndexImport
      parentRoute: typeof rootRoute
    }
    '/forms/$formId/$languageCode': {
      preLoaderRoute: typeof FormsFormIdLanguageCodeImport
      parentRoute: typeof rootRoute
    }
    '/forms/$formId/edit': {
      preLoaderRoute: typeof FormsFormIdEditImport
      parentRoute: typeof rootRoute
    }
    '/monitoring-observers/edit/$monitoringObserverId': {
      preLoaderRoute: typeof MonitoringObserversEditMonitoringObserverIdImport
      parentRoute: typeof rootRoute
    }
    '/monitoring-observers/push-messages/$id': {
      preLoaderRoute: typeof MonitoringObserversPushMessagesIdImport
      parentRoute: typeof rootRoute
    }
    '/observers/$observerId/edit': {
      preLoaderRoute: typeof ObserversObserverIdEditImport
      parentRoute: typeof rootRoute
    }
    '/responses/$formId/aggregated': {
      preLoaderRoute: typeof ResponsesFormIdAggregatedImport
      parentRoute: typeof rootRoute
    }
    '/responses/citizen-reports/$citizenReportId': {
      preLoaderRoute: typeof ResponsesCitizenReportsCitizenReportIdImport
      parentRoute: typeof rootRoute
    }
    '/responses/quick-reports/$quickReportId': {
      preLoaderRoute: typeof ResponsesQuickReportsQuickReportIdImport
      parentRoute: typeof rootRoute
    }
    '/forms/$formId/edit-translation/$languageCode': {
      preLoaderRoute: typeof FormsFormIdEditTranslationLanguageCodeImport
      parentRoute: typeof rootRoute
    }
    '/monitoring-observers/push-messages/$id/view': {
      preLoaderRoute: typeof MonitoringObserversPushMessagesIdViewImport
      parentRoute: typeof rootRoute
    }
    '/monitoring-observers/view/$monitoringObserverId/$tab': {
      preLoaderRoute: typeof MonitoringObserversViewMonitoringObserverIdTabImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AcceptInviteSuccessRoute,
  ElectionEventTabRoute,
  ElectionRoundsElectionRoundIdRoute,
  FormsFormIdRoute,
  MonitoringObserversTabRoute,
  MonitoringObserversCreateNewMessageRoute,
  NgosNgoIdRoute,
  ObserversObserverIdRoute,
  ResetPasswordSuccessRoute,
  ResponsesSubmissionIdRoute,
  AcceptInviteIndexRoute,
  ElectionEventIndexRoute,
  ElectionRoundsIndexRoute,
  ForgotPasswordIndexRoute,
  LoginIndexRoute,
  MonitoringObserversIndexRoute,
  NgosIndexRoute,
  ObserversIndexRoute,
  ResetPasswordIndexRoute,
  ResponsesIndexRoute,
  FormsFormIdLanguageCodeRoute,
  FormsFormIdEditRoute,
  MonitoringObserversEditMonitoringObserverIdRoute,
  MonitoringObserversPushMessagesIdRoute,
  ObserversObserverIdEditRoute,
  ResponsesFormIdAggregatedRoute,
  ResponsesCitizenReportsCitizenReportIdRoute,
  ResponsesQuickReportsQuickReportIdRoute,
  FormsFormIdEditTranslationLanguageCodeRoute,
  MonitoringObserversPushMessagesIdViewRoute,
  MonitoringObserversViewMonitoringObserverIdTabRoute,
])

/* prettier-ignore-end */
